*제네릭을 모르면 도큐먼트를 해석할수 없다.
*제네릭을 사용함으로써 얻는 이점

-1.컴파일시 강한타입 체크를 할수 있다. (컴파일시 미리타입을 강하게 체크해서 에러를 사전에 방지한다.)
-2.타입변환을 제거할수 있다.

*제네릭  "<>"  
   ex)_ public class 클라스명 <T>{}
         pubic interface 인터페이스명<T>{}


*제네릭 메소드
   ex)_ public<타입파라미터> 리턴타입 메소드명(매게변수){}
         public<T> Box><T> boxing(T t){}
                (type)       (객체)          (리턴타입)   

                


*제한된 타입 파라미터

Public <T extends 상위타입 > 리턴타입 메소드 (매게변수,..._{}

-상위타입의 클래스의 종류만 쓸수있게한다.
-상위타입이거나 하위 또는 구현 클래스만 지정할 수 있다.

*주의*
메소드 {} 안에서 타입파라미터 변수로 사용하는것은 상위타입의 맴버 (필드,메소드)로 제한된다.

Ex)
Public <T extend Number> int compare (T t1 ,T t2)
{
   Double v1 = t1.double.Value();    //Number의 doubleValue() 메소드 사용
   Double v2 = t2.double.Value();    //Number의 doubleValue() 메소드 사용
   Return Double.compare(v1,v2)
}        

즉 Number의 하위타입으로 밖에 선언이 안된다.


*와일드카입 타입<?>

-타입 파라미터를 제한할 목적으로 사용

와일드카드 타입의 세가지 형태

1.제네릭타입<?> :제한없음

2.제네릭타입<? Extends 상위타입> : 상위 클래스 제한
  - 타입 파라미터를 대치하는 구체적으로 타입으로 상위 타입이나 하위 타입만 올 수 있다.
 
3.제네릭타입<? Super 하위타입> : 하위클래스 제한
  - 타입 파라미터를 대치하는 구체적인 타입으로 하위 타입이나 상위 타입이 올 수 있다.













