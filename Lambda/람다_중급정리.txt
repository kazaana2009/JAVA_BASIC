1.
표준 API의 함수적 인터페이스
-java.util.function 패키지에 포함
-매개타입으로 사용되어 람다식을 매개값으로 대입할 수 있도록 한다.

2.
-Consumer 함수적 인터페이스
    매개값이 있고 리턴값이 없는 추상 메소드
    
    => Consumer <String> consumer =t -> {t를 소비하는 실행문}. //t는 제네릭으로 String 으로 정의했기
       때문에 문자여야한다.
    => Bi(2)Consumer <Stinrg,String> consumer =(t,y) -> {t,y를 소비하는 실행문}. /외부로부터 2개의
       값을 받아오는...
    => DoubleConsume consumer =>d {d를 소비하는 실행문}
    => ObjIntConsumer <String> consumer =(t,i) ->{t ,i 소비하는 실행문} 
       //즉 t는매개타입이 String  i의 매개타입은 int 를 사용함.s 


-supplier 함수적 인터페이스
    매개값이 없고 리턴값만 있는 추상 메소드
    //외부로 값을 전달해주는
    => Supplier <String> supplier =()->{..return 문자열}
       String 은 리턴타입.
 
-Function 함수적 인터페이스
    A->B 의미를 말한다. 매개값과 리턴값이 모드있는 추상메소드
    주로 매개값을 리턴값으로 매핑(타입변환)할 경우에 사용
    Ex) "10". -->. 10

   => Function <Student ,String> function= t->{return t.getName();} //t는 Student.
		*Student 는 매개타입 String 은 리턴타입!  *
  
   => ToIntFunction <Student> function = t->{t.getScore();}
                *Student 를 매개값을 받고 리턴값은 Int

-Operator 함수적 인터페이스
    매개값과 리턴값이 모두 있는 추상메소드
    주로 매개값을 연산하고 그결과를 리턴.
    Ex) 5, 3. --> 8

    => Function과 동일하게 매개값과 리턴값이 있는 apply xx 매소드를 가지고 있다. 하지만 이들 메소드는 매개값을 
       리턴 역활보다는 연산을 수행한후 동일한 타입으로 리턴값을 제공하는 역활

-Predicate 함수적 인터페이스
    매개값을 조사해서 True & False를 리턴할때 사용.(boolean) 
    매개변수와 boolean 리턴값이 있는 test()메소드를 가지고있다.
    =>  


