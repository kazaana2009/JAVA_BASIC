1.
*함수적 프로그래밍=람다
 -함수적 이란 y=f(x)
데이터를 매개값으로 전달하고 결과를 받는 코드들로 구성
       (x) 
 -대용량데이터의 처리시 유리하다.(객체지향 프로그래밍보다)
 -멀티코어 CPU에서 병렬 처리할때 유리함.
 -반복적인 이벤트 처리는 핸들러 객체보다는 핸들러 함수가 적합.
 -현대적 프로그래밍(객체지향+함수적)

2.
*익명 함수을 생성하기 위한 식
 Ex)_타입 매개변수 ->{실행문}
 - 사용하는 이유 : 코드가 매우 간결 해짐 , 컬렉션 요소(대용량 데이터)를 필터링 또는 매핑해서 쉽게 집계할 수 있다.

3.
*자바는 람다식을 함수적 인터페이스의 익명 구현 객체로 취급
  -(한개의) 매소드를 정의하고 있는 인터페이스를 <함수적 인터페이스>라고 함. 
  -람다식 과 쓰레드의 Runable 의 관계

 Ex)Runnable runnable = (1)->{.2.} ----람다식

    Runnable runnable = new Runnable(){
 	public void run(1){.2.}


    }

1번과. 2번의 익명 구현 객체가 같다.(똑같은 효과)

4.
익명 구현 객체라고 불리는이유...
람다식은 매개 변수를 가진 코드 불록이라고도 불림
(매개변수)->{코드 블록}


5. 
람다식 기본문법
 -(타입 매개변수,..)->{실행문}

   Ex_) (int a)->{sysout(a);}

 -약식표현
   A:매개 타입은 런타임시에 대입값에 따라 자동으로 인식하기 때문에 생략가능
     Ex_)(a) ->{sysout(a);}

   B:하나의 매개변수만 있을경우에는 괄호() 생략가능   
     Ex_) a ->{sysout(a);}

   C:하나의 실행문만 있다면 중괄호{} 생략가능
     Ex_) a ->sysout(a);

   D:매개 변수가 없다면 괄호 생략할 수 없다.
     Ex_) () ->{...}
 
   E:리턴값이 있는경우 리턴문을 사용가능
     Ex_) (x,y) ->{return x+y;}

   F:중괄호에 리턴값만 있을경우 중괄호 생략가능
     Ex_) (x,y) ->{x+y}

6.
타겟타입 = 람다식이 대입이되는 인터페이스를 말한다.(익명 구현객체를 만들때 사용할 인터페이스)
   인터페이스 변수 = 람다식;
   (타겟타입)

-모든 인터페이스는 람다식의 타겟타입이 될 수 없다
   -람다식은 하나의 메소드를 정의해야하기때문
   -하나의 (추상매소드)만 선언된 인터페이스만 타겟타입이 될 수 있음

-@FunctionalInterface 어노테이션 (자바 8)
  -하나의 추상메소드만 가지는치 컴파일러가 체크하도록함
  -두 개 이상의 추상매소드가 선언되어있으면 컴파일 오류발생


  Ex 매게변수와 리턴값이 없는 람다식
<인터페이스>                                            <람다식>
@FunctionalInterface                
Public interface MyfunctionalInterface{      ->.      MyFuctionalInterface fi = ()->{...}       
    Public void method();                             fi.method();
}



7.
클래스의 맴버 사용
 -람다식 실행 블록에는 클래스의 맴버인 필드와 메소드를 제약없이 사용 할 수 있다.
 -람다식 실행 블록내에서 this는 람다식을 실행한 객체의 참조이다.
  (중첩클래스)<<<< Lambda_Field 참조

8.
람다식에서 사용하는 외부 로컬변수는 Final 특성을 갖는다.
 - 즉 람다식안에서 사용이되면 Final 특성을갖는다. <<<< Lambda_LocalVal 참조
 - 람다식에서 변수들이 사용이되면 묵시적으로 Final을 명시 안해줘도된다.





 